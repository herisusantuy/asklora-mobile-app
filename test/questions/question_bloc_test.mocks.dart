// Mocks generated by Mockito 5.2.0 from annotations
// in asklora_mobile_app/test/questions/question_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:asklora_mobile_app/feature/questions/domain/fixture.dart'
    as _i2;
import 'package:asklora_mobile_app/feature/questions/repository/question_collection_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFixture_0 extends _i1.Fake implements _i2.Fixture {}

/// A class which mocks [QuestionCollectionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionCollectionRepository extends _i1.Mock
    implements _i3.QuestionCollectionRepository {
  MockQuestionCollectionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Fixture get fixture => (super.noSuchMethod(Invocation.getter(#fixture),
      returnValue: _FakeFixture_0()) as _i2.Fixture);

  @override
  _i4.Future<_i2.Fixture> fetchQuestions() =>
      (super.noSuchMethod(Invocation.method(#fetchQuestions, []),
              returnValue: Future<_i2.Fixture>.value(_FakeFixture_0()))
          as _i4.Future<_i2.Fixture>);

  @override
  _i4.Future<_i2.Fixture> getQuestions() =>
      (super.noSuchMethod(Invocation.method(#getQuestions, []),
              returnValue: Future<_i2.Fixture>.value(_FakeFixture_0()))
          as _i4.Future<_i2.Fixture>);
}
